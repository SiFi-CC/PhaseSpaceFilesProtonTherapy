// ********************************************************************
// *                                                                  *
// *         Experimentelle Methoden der Teilchenphysik               *
// *                                                                  *
// * Geant 4 Tutorials  . Detector physics                            *
// * RWTH Aachen 22.10.2009                                           *
// * Karim LAIHEM                                                     *
// ********************************************************************
//
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......


#include "PrimaryGeneratorAction.hh"
#include "SPSPhaseSpaceMessenger.hh"

#include "G4Event.hh"
#include "G4RunManager.hh"
#include "G4ParticleGun.hh"
#include "G4GeneralParticleSource.hh"
#include "G4ParticleTable.hh"
#include "G4ParticleDefinition.hh"
#include "globals.hh"
#include "G4SystemOfUnits.hh"
#include <TFile.h>
#include <TTree.h>
#include <TBranch.h>

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

PrimaryGeneratorAction::PrimaryGeneratorAction():G4VUserPrimaryGeneratorAction()   
{   
	G4int n_particle = 1;
	// 1. Line for Phasespacefiles
	particleGun  = new G4ParticleGun(n_particle);
	//~ particleGun = new G4GeneralParticleSource();

	gunMessenger = new SPSPhaseSpaceMessenger(this);

	// set path of input file
	InputPhaseSpaceFile = "DecodedTFile_energy_103001_PHASEAP.root";
	//~ G4String DataDir = "PhaseSpaceFiles/";
	G4String DataDir = "./" ;
	InputPhaseSpaceFile = DataDir+InputPhaseSpaceFile;

	// default particle kinematics

	G4ParticleTable* particleTable = G4ParticleTable::GetParticleTable();
	G4String particleName;
	G4ParticleDefinition* particle= particleTable->FindParticle(particleName="proton");
	//~ Incomment for phasespacefiles 
	particleGun->SetParticleDefinition(particle);
	particleGun->SetParticleMomentumDirection(G4ThreeVector(0.,0.,1.));
	particleGun->SetParticleEnergy(130.*MeV);
	particleGun->SetParticlePosition(G4ThreeVector(0.*cm,0.*cm,-2.*cm));


	EStart = 0.; xStart = 0.; yStart= 0.;  xcosStart =  0.; ycosStart = 0.; //filled by phasespasefile
	//iStart = 0;		// iterator, setting the entrynumber to be read from TTree, defined by void SetInputStartNumber

	ReadTTree(InputPhaseSpaceFile);
	std::cout << "reading InputFile: " << InputPhaseSpaceFile << std::endl;

	zcosStart = sqrt(1-xcosStart*xcosStart-ycosStart*ycosStart); //calculates momentum in z-direction
	zStart = -2*cm;         // position of provided PhaseSpaceFiles is 2 cm upstream of x,y-plane defined by end of nozzle's plastic case


}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

PrimaryGeneratorAction::~PrimaryGeneratorAction()
{ 
	delete particleGun;
	delete gunMessenger;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void PrimaryGeneratorAction::GeneratePrimaries(G4Event* anEvent)
{
	//this function is called at the beginning of each event

	//shoot particles with phasespace information generated by PhaseSpaceFile
	//G4cout << "reading InputFile: " << InputPhaseSpaceFile << G4endl;
	if (iStart > 9999999) iStart = 0 ;
	InputFile->cd();
	nb = InputTree->GetEntry(iStart);
	zcosStart = sqrt(1-xcosStart*xcosStart-ycosStart*ycosStart); //calculates momentum in z-direction
	/*G4cout << "Energy" << EStart*GeV << G4endl;
	G4cout << "Pos" <<  xStart << yStart << zStart << G4endl;
	G4cout << "Mom" <<  xcosStart << ycosStart << zcosStart << G4endl;*/
	particleGun->SetParticleEnergy(EStart* GeV);
	particleGun->SetParticlePosition(G4ThreeVector(xStart *cm,yStart *cm,zStart));
	particleGun->SetParticleMomentumDirection(G4ThreeVector(xcosStart,ycosStart,zcosStart));
	


	particleGun->GeneratePrimaryVertex(anEvent);

	iStart++;
}


//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
void PrimaryGeneratorAction::SetInputFile(G4String PhaseSpaceFile)	//called by HITSetupPhaseSpaceGPSMessenger
{
	PhaseSpaceFile= "DecodedTFile_energy_"+PhaseSpaceFile+".root";
	InputPhaseSpaceFile = PhaseSpaceFile;
	G4cout << "InputPhaseSpaceFile = " << InputPhaseSpaceFile <<G4endl;
	ReadTTree(InputPhaseSpaceFile);
	G4cout << "reading InputFile: " << InputPhaseSpaceFile << G4endl;
}

void PrimaryGeneratorAction::SetInputStartNumber(G4int n_iteration)	//called by HITSetupPhaseSpaceGPSMessenger
{
	if (n_iteration > 0){
		iStart = n_iteration; G4cout << "Starting with Proton Nb " << n_iteration <<G4endl;
	} else {
		iStart = 0; G4cout << "Starting with Proton Nb " << 0 <<G4endl;
	}
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
void PrimaryGeneratorAction::ReadTTree(G4String fname)
{
	InputFile = new TFile(fname, "READ");
	if (!InputFile){ G4cout << "the TFile " << fname << " could not be found in directory!" << G4endl;}
	InputTree = (TTree*)InputFile->Get("PhaseSpaceTree");
	if (!InputTree){ G4cout << "the TTree PhaseSpaceTree could not be found in TFile "<< fname << G4endl;}
	InputEnergy = InputTree->GetBranch("energy");
	InputXPos = InputTree->GetBranch("xpos");
	InputYPos = InputTree->GetBranch("ypos");
	InputXCos = InputTree->GetBranch("xcos"); 
	InputYCos = InputTree->GetBranch("ycos");

	InputEnergy->SetAddress(&EStart);
	InputXPos->SetAddress(&xStart);
	InputYPos->SetAddress(&yStart);
	InputXCos->SetAddress(&xcosStart);
	InputYCos->SetAddress(&ycosStart);

}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
